!begin !comment     pentomino, 130968;
!library A0, A1, A4, A5, A15, A16;

!integer form1p12e;
!integer form1p1e;
!integer form6p2;
!integer form2p9;
!integer score, piece number, board length, board width, piece count, standen count,  i, j, k, position, lb;
!integer printer, reader;

form1p12e := format({s+d.dddddddddddº+nd});
form1p1e  := format({+d.dº+nd});
form6p2   := format({snnnnnd.dd});
form2p9   := format({+nd.ddddddddds});

printer := 30;
open(printer);

reader := 20;
open(reader);

  board length:= read(reader); board width:= read(reader); piece count:= read(reader); standen count:= read(reader);
  lb:= board length × (board width - 1);

  !begin !integer !array board [-39 : 100],
      standen, index [1 : piece count],
      information [1 : 8 × standen count];
    !boolean !array unused [1 : piece count];

    !procedure print solution;
    !begin !integer i, j;
      score:= score + 1;
      writetext(printer,{ _ });
      !for j:= 1 !step 1 !until 2 × board length !do
      !begin writetext(printer,{-}); writetext(printer,{ _ }) !end ;
      !comment write(printer,form6p2,time); newline(printer,1);
      !for i:= 0 !step board length !until lb !do
      !begin writetext(printer,{I});
        !for j:= 1 !step 1 !until board length - 1 !do
        !begin writetext(printer,{ _  _  _ });
          !if board [i + j] ± board [i + j + 1]
          !then writetext(printer,{I}) !else writetext(printer,{ _ })
        !end ;
        writetext(printer,{ _  _  _ }); writetext(printer,{I}); newline(printer,1); writetext(printer,{ _ });
        !if i < lb
        !then !begin !for j:= 1 !step 1 !until board length !do
                     !begin !if board [i + j] ± board [i + j + board length]
                       !then !begin writetext(printer,{-}); writetext(printer,{ _ });
                                   writetext(printer,{-}); writetext(printer,{ _ })
                                 !end
                       !else writetext(printer,{ _  _  _  _ })
                     !end
                   !end
        !else !for j:= 1 !step 1 !until 2 × board length !do
                   !begin writetext(printer,{-}); writetext(printer,{ _ }) !end ;
        newline(printer,1)
      !end ;
      newline(printer,2);
      !if score = 7 !then !goto ex
    !end print solution;

    !procedure up (field, column); !value field, column;
      !integer field, column;
    !begin !integer i, j, k, r, w, piece, count;
      piece number:= piece number + 1;
      !for piece:= 1 !step 1 !until piece count !do
      !if unused [piece] !then
      !begin unused [piece]:= !false ;
        board [field]:= piece;
        count:= standen [piece] - 1;
        !for i:= 0 !step 1 !until count !do
        !begin w:= index [piece] + 4 × i;
          !if board [information [w] + field] = 0 !then
          !begin !if board [information [w + 1] + field] = 0 !then
             !begin !if board [information [w + 2] + field] = 0 !then
               !begin !if board [information [w + 3] + field] = 0 !then
                 !begin !for j:= 0, 1, 2, 3 !do
                     board [information [w + j] + field]:= piece;
                     !if piece number = piece count
                     !then print solution
                     !else
                     !begin
                       !for k:= column !step 1 !until board length !do
                       !for r:= 0 !step board length !until lb !do
                       !if board [r + k] = 0 !then !goto beet;
                     beet: up (r + k, k)
                     !end ;
                     !for j:= 0, 1, 2, 3 !do
                     board [information [w + j] + field]:= 0
                  !end
                !end
              !end
           !end
         !end ;
         unused [piece]:= !true
       !end ;
       board [field]:= 0;
    down: piece number:= piece number - 1
    !end up;

    position:= 1;
    !for i:= 1 !step 1 !until piece count !do
    !begin j:= read(reader); !comment steennummer, wordt niet gebruikt;
       index [i]:= position; standen [i]:= read(reader);
       !for j:= 1 !step 1 !until standen [i] !do
       !begin !for k:= 0 !step 1 !until 3 !do
         information [position + k]:= read(reader);
         position:= position + 4
       !end
    !end ;
    !for i:= - 39 !step 1 !until 0,
                  61 !step 1 !until 100 !do board [i]:= - 1;
    !for i:= 1 !step 1 !until 60 !do board [i]:= 0;
    !for i:= 1 !step 1 !until piece count !do
    unused [i]:= !true ;
    score:= piece number:= 0;
    newline(printer,1); writetext(printer,{The _ first _ 7 _ solutions:}); newline(printer,3);
    up (1, 1);
  ex:
  !end ;

close(reader);
close(printer);

!end
|
9,
10, 6, 12, 63,
1, 1, -9, 1, 11, 2,
2, 2, 1, 2, 3, 4, 10, 20, 30, 40,
3, 4, 1, 10, 20, 21, 1, 11, 20, 21, -10, -9, -8, 2, 10, 11, 12, 2,
4, 4, 1, 11, 21, 22, 1, -9, -19, -18, 10, 11, 12, 22, -10, -9, -8, -18,
5, 4, 1, 11, 21, 2, 1, -9, -19, 2, 1, 2, -8, 12, 10, -10, 1, 2,
6, 4, 1, 2, 12, 22, 1, 2, -8, -18, 1, 2, 10, 20, 1, 2, -10, -20,
7, 4, 1, 11, 12, 22, 1, -9, -8, -18, 10, 11, 21, 22, -10, -9, -19, -18,
8, 8, 1, 11, 12, 13, 1, -9, -8, -7, 1, 2, 12, 13, 1, 2, -8, -7, 10, 20, 21, 31, 10, 20, 19, 29, 10, 11, 21, 31, 10, 9, 19, 29,
9, 8, 1, -9, 2, 12, 1, 11, 2, -8, 10, 11, 21, 12, -10, -9, -19, -8, 1, 11, 21, 12, 1, -9, -19, -8, 1, 11, -9, 12, 1, 11, -9, -8,
10, 8, 1, 2, 3, 12, 1, 2, 3, -8, 10, 20, 30, 11, -10, -20, -30, -9, 1, 11, 21, -9, 1, -9, -19, 11, 11, 1, 2, 3, -9, 1, 2, 3,
11, 8, 1, 2, 3, 13, 1, 2, 3, -7, 10, 20, 30, 1, -10, -20, -30, 1, 1, 11, 21, 31, 1, -9, -19, -29, 10, 1, 2, 3, -10, 1, 2, 3,
12, 8, 1, 2, 11, 12, 1, 2, -9, -8, 1, 2, 10, 11, 1, 2, -10, -9, 1, 10, 11, 20, 1, 10, 11, 21, 1, -10, -9, -20, 1, -10, -9, -19,
|
