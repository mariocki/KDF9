# This file is part of ee9 (V8), the GNU Ada emulator of the English Electric KDF9.
# Copyright (C) 2021, W. Findlay; all rights reserved.
#
# The ee9 system is free software; you can redistribute it and/or
# modify it under terms of the GNU General Public License as published
# by the Free Software Foundation; either version 3, or (at your option)
# any later version. This program is distributed in the hope that it
# will be useful, but WITHOUT ANY WARRANTY; without even the implied
# warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
# See the GNU General Public License for more details. You should have
# received a copy of the GNU General Public License distributed with
# this program; see file COPYING. If not, see <http://www.gnu.org/licenses/>.

# Check for presence of build assets.

case `echo V*p*` in
   "V*p*")
      echo No version tag found. Wrong directory\?
      exit 1
   ;;
   *)
   ;;
esac

# Check for unsupported architectures.

case ${2:-others} in
PPC)
   echo The PowerPC Macs are no longer supported, as they lack an Ada 2012 compiler.
   exit 9
   ;;
RPi|RapsberryPi)
   echo The Rapsberry Pi no longer has a custom build procedure \(use Linux\).
   exit 9
   ;;
*)
   ;;
esac

# Set up useful paths.

ROOT=..
BUILD=${ROOT}/Build
SOURCE=${ROOT}/Source
TESTING=${ROOT}/Testing
ADJUNCTS=${TESTING}/Adjuncts
BINARY=${TESTING}/Binary
KIDSGROVE=${TESTING}/Kidsgrove
OBJECT=-aO${BUILD}

# Set up common options and parameters.

EXCEPTIONS=-funwind-tables
OTHERS=
BUG_FIXES=
GCC_OPTIONS="${EXCEPTIONS} ${OTHERS} ${BUG_FIXES}"
CONCURRENCY=-j0

# Set up the OS-specific parameters and files.

# Set the options list for old and new versions of GNAT
BASE_GNAT_OPTIONS="-gnatl12j96  -gnatw.e -gnatwD -gnatwH -gnatwP -gnatwT -gnatw.W -gnatw.B -gnatwC -gnatw.u -gnatyO -gnatw.Y -gnatw.N"
WARN_GNAT_OPTIONS="-gnatwa -gnatwl -gnatwD -gnatwH -gnatwP -gnatwT -gnatw.u -gnatw.W -gnatyO -gnatw.Y"

case `uname -s` in
Darwin)
       ;;
*)     if test "$2" = ""
       then
          echo A macOS build is not possible on this system.  Give a correct OS parameter.
          exit 8
       fi
       ;;
esac

OS=${2:-macOS}

EE9=ee9
KAL3=kal3
MKCHAN=mkchan
XBIN2=xbin2
KIDOPT=kidopt
A2B=a2b
MTP=mtp

case ${OS} in

UNIX|Unix|unix|LINUX|Linux|linux)
   cp ${SOURCE}/os_specifics_for_posix.adb ${SOURCE}/os_specifics.adb
   BASE_GNAT_OPTIONS="${BASE_GNAT_OPTIONS} -fdata-sections -ffunction-sections"
   BASE_LINK_OPTIONS="-bargs -static -largs -Wl,--gc-sections -Wl,--as-needed"
   CC=gcc
   STRIP=strip
   ;;

macOS|Macintosh|Mac|OSX)
   cp ${SOURCE}/os_specifics_for_posix.adb ${SOURCE}/os_specifics.adb
   BASE_GNAT_OPTIONS="${BASE_GNAT_OPTIONS} -fdata-sections -ffunction-sections"
   BASE_LINK_OPTIONS=" -bargs -static -Sin -largs -Wl,-dead_strip -Wl,-dead_strip -largs "
   CC=cc
   CCWARNINGS="-Wno-pointer-sign -Wno-bitwise-op-parentheses"
   STRIP=strip
   ;;

[Ww]indows|WINDOWS)
   cp ${SOURCE}/os_specifics_for_windows.adb ${SOURCE}/os_specifics.adb
   BASE_LINK_OPTIONS="-largs ./get_O_BINARY.o -bargs -static"
   CC=gcc
   EE9=${EE9}.exe
   KAL3=${KAL3}.exe
   MKCHAN=${MKCHAN}.exe
   XBIN2=${XBIN2}.exe
   KIDOPT=${KIDOPT}.exe
   A2B=${A2B}.exe
   MTP=${MTP}.exe
   STRIP=": "
   ;;

*)
   echo Invalid target OS parameter \"$2\"!
   exit 2
   ;;

esac

# Perform housekeeping tasks.

case ${1:-ee9} in

tidy)
   ${BUILD}/tidy
   exit
	;;

clean)
   rm -f  ${BUILD}/b\~*.* ${BUILD}/*.ali ${BUILD}/*.o ${BUILD}/*.su
   exit
	;;

zip)
	${BUILD}/zipup ${OS}
	;;

ee9|warn)
   case ${2:-macOS} in

   [Ww]indows|WINDOWS)
      OS=$2
      echo Compiling get_O_BINARY.c for Microsoft Windows with Cygwin.
      gcc -c ${SOURCE}/get_O_BINARY.c
      rm -f ${ROOT}/Testing/ee9
      ;;
   *)
      OS=${2:-macOS}
      ;;
   esac
   ;;

kal3|KAlgol|kalgol|distro|all|a2b|mtp|call_tape|kidopt)
   ;;

*)
   echo Invalid housekeeping parameter \"$1\"!
   exit 1
   ;;

esac

# Set up optimization variants.

TEST_GNAT_OPTIONS="-gnataoVaF ${BASE_GNAT_OPTIONS} -fstack-usage"
TEST_LINK_OPTIONS="${BASE_LINK_OPTIONS}"

case ${OS} in

macOS|Macintosh|Mac|OSX|UNIX|Unix|unix|LINUX|Linux|linux)
   OPT_GNAT_OPTIONS="${BASE_GNAT_OPTIONS} -gnatfn -mtune=native -O3 -flto"
   OPT_LINK_OPTIONS="${BASE_LINK_OPTIONS} -flto"
   ;;

[Ww]indows|WINDOWS)
   OPT_GNAT_OPTIONS="${BASE_GNAT_OPTIONS} -gnatf -mtune=native -O3"
   OPT_LINK_OPTIONS="${BASE_LINK_OPTIONS}"
   ;;

esac
> komlog.ada

# Build a version of ee9 as specified.

case ${1:-ee9} in

ee9)
	if cmp adc-ee9.adc gnat.adc
	then
	   echo gnat.acd is up to date.
	else
	   cp adc-ee9.adc gnat.adc
	fi
	COMMAND="gnatmake ${MAKE_OPTIONS} -aI${SOURCE} ${OBJECT} ${GCC_OPTIONS} ${OPT_GNAT_OPTIONS} ${CONCURRENCY} ee9 ${OPT_LINK_OPTIONS}"
   echo ====
   (
	  echo Version V*p* of ee9 for ${OS}, built on `date`.
     echo mk9 \'${1:-ee9}\' build: optimised and with full language checks, using configuration options:
	  echo
     cat gnat.adc | grep "^pragma"
	  echo
	  echo Using the build command:
     echo ${COMMAND}
	)  >>komlog.ada
	cat komlog.ada
   echo ====

	eval ${COMMAND} >>komlog.ada
	if test -r ee9
	then
	   $STRIP ee9
	   mv ee9 ${TESTING}/${EE9}
	   fgrep -B2 ">>>" komlog.ada
	else
	   echo ee9 COMPILATION FAILED! 
	   fgrep -B2 ">>>" komlog.ada
	   exit 10
	fi
   ;;


warn)
	if cmp adc-warn.adc gnat.adc
	then
	   echo gnat.acd is up to date.
	else
	   cp adc-warn.adc gnat.adc
	fi
   COMMAND="gnatmake ${MAKE_OPTIONS} -aI${SOURCE} ${OBJECT} ${GCC_OPTIONS} ${TEST_GNAT_OPTIONS} ${CONCURRENCY} ${WARN_GNAT_OPTIONS} -O0 ee9 ${TEST_LINK_OPTIONS}"
   echo ====
   (
	  echo Version V*p* of ee9 for ${OS}, built on `date`.
     echo mk9 \'${1}\' build: unoptimised and with copious warnings enabled, using configuration options:
	  echo
     cat gnat.adc | grep "^pragma"
	  echo
	  echo Using the build command:
	  echo ${COMMAND}
	)  >>komlog.ada
	cat komlog.ada
   echo ====

	eval ${COMMAND} >>komlog.ada
	if test -r ee9
	then
	   mv ee9 ${TESTING}/${EE9}
	   fgrep -B2 ">>>" komlog.ada
	else
	   echo
	   echo ee9 COMPILATION FAILED! 
	   fgrep -B2 ">>>" komlog.ada
	   exit 10
	fi
   ;;


kal3)
   echo
   echo Compiling kal3 for ${OS}.
   rm -f ${TESTING}/${KAL3}
   $CC -o kal3 -w ${ADJUNCTS}/kal3.c ${ADJUNCTS}/y.tab.c $CCWARNINGS
	if test -r ${KAL3}
	then
	   mv ${KAL3} ${TESTING}
	   echo kal3 COMPILED O.K.
	else
	   echo kal3 COMPILATION FAILED 
	   exit 10
	fi
	;;


KAlgol|kalgol)
   echo
   echo Compiling Kidsgrove compiler components for ${OS}.
	echo
   echo Compiling mkchan for  ${OS}.
   $CC -o mkchan ${ADJUNCTS}/mkchan.c  $CCWARNINGS
	if test -r ${MKCHAN}
	then
	   mv ${MKCHAN} ${ADJUNCTS}
	   echo mkchan COMPILED O.K.
	else
	   echo mkchan COMPILATION FAILED 
	   exit 10
	fi
	echo
	echo Compiling kidopt for ${OS}.
	COMMAND="gnatmake ${MAKE_OPTIONS} -aI${SOURCE} ${OBJECT} ${GCC_OPTIONS} ${OPT_GNAT_OPTIONS} kidopt ${OPT_LINK_OPTIONS}"
	eval ${COMMAND} >>komlog.ada
	if test -r kidopt
	then
	   mv ${KIDOPT} ${TESTING}
	   echo kidopt COMPILED O.K.
	else
	   echo kidopt COMPILATION FAILED 
	   exit 10
	fi
	mk9 kal3 ${OS}
	echo; echo Converting mksys2.bin to MKSYS2 for ee9.
	${TESTING}/a2b -r2p < ${ADJUNCTS}/mksys2.bin > ${ADJUNCTS}/MKSYS2
   echo; echo Converting KAB00.bin to KAB00DH--USU for ee9.
   ${TESTING}/a2b -r2p < ${ADJUNCTS}/KAB00.bin  > ${ADJUNCTS}/KAB00DH--USU
   ;;


a2b)
   echo
   echo Building a2b.
	COMMAND="gnatmake ${MAKE_OPTIONS} -aI${SOURCE} ${OBJECT} ${GCC_OPTIONS} ${OPT_GNAT_OPTIONS} a2b ${OPT_LINK_OPTIONS}"
   echo ====
   (
	  echo Using the build command:
     echo ${COMMAND}
	)  >>komlog.ada
	cat komlog.ada
   echo ====
   cp adc-ee9.adc gnat.adc
	eval ${COMMAND} >>komlog.ada
	if test -r a2b
	then
	   $STRIP a2b
	   mv a2b ${TESTING}/${A2B}
	   fgrep -B2 ">>>" komlog.ada
	else
	   echo ee9 COMPILATION FAILED 
	   fgrep -B2 ">>>" komlog.ada
	   exit 10
	fi
	;;


mtp)
   echo
   echo Building mtp.
	COMMAND="gnatmake ${MAKE_OPTIONS} -aI${SOURCE} ${OBJECT} ${GCC_OPTIONS} ${OPT_GNAT_OPTIONS} mtp ${OPT_LINK_OPTIONS}"
   echo ====
   (
	  echo Using the build command:
     echo ${COMMAND}
	)  >>komlog.ada
	cat komlog.ada
   echo ====
   cp adc-ee9.adc gnat.adc
	eval ${COMMAND} >>komlog.ada
	if test -r mtp
	then
	   $STRIP mtp
	   mv mtp ${TESTING}/${MTP}
	   fgrep -B2 ">>>" komlog.ada
	else
	   echo ee9 COMPILATION FAILED 
	   fgrep -B2 ">>>" komlog.ada
	   exit 10
	fi
	;;


all)
   echo
   echo Building a2b, mtp, kal3, KAlgol and ee9.
	${BUILD}/mk9 a2b  ${OS}
	${BUILD}/mk9 mtp  ${OS}
	${BUILD}/mk9 KAlgol ${OS}
	echo
	grep "Welcome to ee9 V" ${SOURCE}/ee9.adb
	${BUILD}/mk9 ee9  ${OS} distro
	;;


distro)
   echo
   echo Building a distribution package for ${OS}.
	${BUILD}/mk9 all ${OS}
	${BUILD}/pk9 ${OS}
	;;


*)
   echo
   echo Invalid build-type parameter \"$1\"!
   exit 3
   ;;

esac
