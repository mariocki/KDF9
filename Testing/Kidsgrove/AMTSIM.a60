!begin

   !integer !array LAV[1:1], ILF[1:1];
   !integer LSL, LAL, IDP, NMTREE;

   !integer !procedure nextch;
      !comment get next non-space character;
lbl:
      !if nxtch != 0 !then nextch := inpch !else !goto lbl;

   !integer !procedure insert (g, b, c, d);
      !value g, b, c, d;
      !integer g, b, c, d;
      !comment insert a Turing machine rule (g, b, c) in the match tree at d;
   !begin
   !integer e;
   e := icomb(g, b);
   !if d = 0 !then
      insert := IJK(e, c, 0)
   !else
      !if KP(d) = 0 !then
         !begin
         !if c > JP(d)
            !then insert := IJK(e, c, IJK(d, -1, 0))
         !else
            !if c = JP(d) !then
               !begin
               insert := d;
               outch(15);
               setI(d, e);
               outch(49);
               outint(a);
               !comment print SP, S, c, SP, REPLACED, NL;
               !for g := 0, 51, c, 0, 50, 37, 48, 44, 33, 35, 37, 36, 2, 64 !do outch(g)
               !end
            !else
               insert(IJK(e, c, IJK(0, 0, 0)))
         !end
      !else
         !begin
         insert := d;
         !if c <= JP(d) !then
            setK(d, IJK(insert(g, b, c, IP(KP(d))), -1, KP(KP(d))))
         !else
            setK(d, IJK(IP(KP(d)), -1, insert(g, b, c, KP(KP(d)))))
         !end
   !end of insert;

   !procedure outint (a);
      !value a;
      !integer a;
      !comment output an optionally signed zero-suppressed integer using outch;
   !begin
   !integer q, r, n;
   !Boolean b;
   b := !false;
   !if a < 0 !then
      !begin
      outch(30);
      a := abs(a)
      !end;
   !for n := 14 !step -1 !until 1 !do
      !begin
      q := a % POT(n);
      !if q != 0 !or b !then
         !begin
         b := !true;
         outch(q+16)
         !end;
      a := a - pot(n) * q
      !end;
   outch(a+16);
   !end of outint;

   !comment switch on the type of control card read;
   !switch MNSW := QCARD, TAPE, TEND, SKIP, HERE, DEBUG, LIST, END, STOP, TIME, DISC;

   !comment switch on the type of Turing machine rule being obeyed;
   !switch TYPE := ONE, TWO, THREE;

   !comment switch on the debugging mode;
   !switch DMD  := TFND, DMD1, DMD2, DMD3;

   !comment set up the heap in the array LAV;
   INITAS(LAV(1), LAV(LSL), LAV(LSL+1), LAV(LAL), IDP);
   CLSTCK;

   !comment create a dynamic scope in the heap;
   BGNLST;

   !comment declare ILF as an array of pointers into the heap;
   LSTARR(ILF, LIL);

   !if IDP = 1 !then
      !begin
      EDUMP(4, A, T);
      EDUMP(4, ILF(0), ILF(LIL));
      EDUMP(4, LAV(1), LAV(LSL));
      DUMBUF
      !end requesting postmortem dumps;
   !comment set up the output buffering;
   DEFIOP(IDP, 0);

      !begin
      !comment the following appalling code sets up the control card matching tree in the heap;
      !integer a, b, c, d, e;

      !integer !procedure listn (n, k)
         !value n, k;
         !integer n, k;
         !comment enter a word, held in POT(1..n), with switching code k,
                  in the matching tree and return a pointer to its root;
      !begin
      !integer i, j;
      !for j := 1 !step 1 !Until n !do
         !begin
         i := IJK(k, POT(j), 0;
         k := i
         !end;
      listn := k
      !end of listn;

      !procedure ass;
         !comment add a letter of a word to POT;
      !begin
      POT(b) := -a;
      b := b - 1;
      !end of ass;


      !declare heap pointers;
      DCLST(NMTREE);
      BGNLST;
      DCLST(c);
      DCLST(d);
      DCLST(e);

      !set heap pointers to NIL;
      NMTREE := d := e := c := 0;

      !comment build the control-card matching tree in the heap;

      !comment insert LIST;
      b := 5; !for a := 44, 41, 51, 52, 0, !do ass;
      e := listn(5, 7);

      !comment insert HERE;
      b := 5; !for a := 40, 37, 50, 37, 0, !do ass;
      d := listn(5, 5);
      SETK(d, e);
      e := d;

      !comment insert END;
      b := 4; !for a := 37, 46, 36, 0, !do ass;
      d := listn(4, 8);
      SETK(d, e);
      e := d;

      !comment insert ISC, the D of DISC goes in via DEBUG;
      b := 4; !for a := 41, 51, 35, 0 !do ass;
      c := listn(4, 11);

      !comment insert DEBUG;
      b := 6; !for a := 36, 37, 34, 53, 39, 0 !do ass;
      d := listn(6, 6);
      SETK(d, e);
      e := d;
      SETK(IP(d), c);

      !comment insert TOP, the S of STOP goes in via SKIP;
      b := 4; !for a := 52, 47, 48, 0, !do ass;
      c := listn(4, 9);

      !comment insert SKIP;
      b := 5; !for a := 51, 43, 42, 48, 0, !do ass;
      d := listn(5, 4);
      SETK(d, e);
      e := d;
      d := IP(d);
      SETK(d, c);

      !comment insert END, the T of TEND goes in via TAPE;
      b := 4; !for a := 37, 46, 36, 0 !do ass;
      c := listn(4, 3);

      !comment insert IME, the T of TIME goes in via TAPE;
      b := 4; !for a := 41, 45, 37, 0 !do ass;
      d := listn(4, 10);
      SETK(c, d);

      !comment insert /TAPE;
      b := 6; !for a := 15, 52, 33, 48, 37, 0 !do ass;
      d := listn(6, 2);

      !comment finalize the name tree;
      SETK(IP(d), e);
      SETK(IPIP(d)), c);
      e := d;
      SETK(e, IJK(IJK(1, 0, 0), -49, 0));
      NMTREE := e;

      !comment close the dynamic scope;
      ENDLST;

      !end of setting up NMTREE with the control card matches;

   !for a := 1 !step 1 !until 14 !do POT(a) := 0;

SETUP:
   cleart;
   !for a := 0 !step 1 !until LIL !do ILF(a) := 0;
   incnt := hereq := demode := 0;
   temode := fnd := !false;

   herep := 1;
   rllim := 32;
   lllim := 72;
   t := itime := 10;

SKIN: !comment SKip INput to end of line;
   !if nxtch != 2 !then !goto SKIN;

NLIN: !comment first character of the New LINe;
   a := nxtch;

MAIN:  !comment switching on input type;
   !goto mnsw(treesw);

FAIL: !comment The nature of the line is not recognised.
               If we are in temode (i.e.reading a tape expression)
               then the line is added to the Turing tape
               else it is ignored;
   !if temode !then adtape !else !goto SKIN;

QCARD:
   a := inint; b := nxtch; c := nxtch;
   !if c != 50 !and c != 44 !then
      c := nxtch
   !else
      !if c = 50 !then c := 62 !else c := 63;
   d := nxtch;
   d := inint;
   BGNLST;
   ILF(a) := insert(d, c, b, ILF(a));
   ENDLST;
   !if a != CQ !or b != CS !then !goto NLIN;

   !comment The current input line is a Q card matching
            the current state of the Turing machine,
            so resume simulation;

TICK:
   !if itime > t !then
      !begin
      !comment print /TIME UP;
      !for e := 15, 52, 41, 45, 37, 0, 53, 48, 64 !do outch(e);
      FDUMP
      !end
   !else
      !begin
      split(find(CS, ILF(CQ)), NQ, NS);
      rt:= !if NS < 62 !then 1 !else NS-60
      !end;

   !comment Check for debugging modes and act accordingly;
   !goto DMD(demode+1);

DMD3:
   pterm;

DMD2:
   pstat;
   !if fnd !then !goto type(rt) !else !goto NFND;

DMD1:
   pterm;
   !if fnd !then !goto type(rt) !else !goto NFND;

TFND:
   !if fnd !then !goto type(rt);

NFND:
   !if demode = 2 !then pterm;
   !goto NLIN;

ONE:
   wchtt(NS); CS := NS; CQ := NQ; !goto TICK;

TWO:
   mtl; rchft(CS); CQ := NQ; !goto TICK;

THREE:
   mtr; chft(CS); CQ := NQ; !goto TICK;

TAPE:
   !if temode !then adtape;
   incnt := herep := hereq := 0;
   temode := !true;
   cleart;
   !goto SKIN;

TEND:
   !if !not temode !or incnt = 0 !then !goto SKIN;
   !for a := incnt !step -1 !until herep !do mtr;
   herep := 1;
   temode := !false;
   rchft(CS);
   CQ := hereq;

DNET:
   !if nxtch != 2 then !goto DNET;
   !goto TICK;

SKIP:
   !if temode !then
      !begin
      !for a := inint !step -1 !until 1 !do
         !begin wchtt(0); mtl end;
      incnt := incnt + lint;
      !goto NLIN
      !end;
   !goto SKIN;

HERE:
   !if temode !then
      !begin
      a := nextch;
      herep := incnt + 1;
      hereq := inint;
      !goto NLIN
      !end;
   !goto SKIN;

DEBUG:
   !if temode !then adtape;
   demode := inint;
   !goto NLIN;

LIST:
   !if temode !then adtape;
   LLLIM := inint;
   RLLIM := inint;
   !goto NLIN;

END:
   !if temode !then adtape;
   ENDLST;
   pterm;
   !goto SETUP;

TIME:
   !if temode !then adtape;
   t := itime + inint;
   !goto NLIN;

DISC:
   !if temode !then adtape;
   updisc;
   !goto SKIN;

STOP:
   !if temode !then adtape;
   !for a := 2, 15, 51, 52, 47, 48, 51, 2, 64 !do outch(a);

   !end of inner block

!end of AMTSIM


