ACK-BW|
_b_e_g_i_n

   _l_i_b_r_a_r_y A0, A6;

   _i_n_t_e_g_e_r
      i,
      j,
      k,
      k1;
   _r_e_a_l
      t1,
      t2,
      c;

   _i_n_t_e_g_e_r _p_r_o_c_e_d_u_r_e ackermann(m, n);
      _v_a_l_u_e
         m,
         n;
      _i_n_t_e_g_e_r
         m,
         n;
      ackermann :=
         _i_f m = 0 _t_h_e_n
            n + 1
         _e_l_s_e _i_f n = 0 _t_h_e_n
            ackermann(m - 1, 1)
         _e_l_s_e
            ackermann(m - 1, ackermann(m, n - 1));

   _i_n_t_e_g_e_r _p_r_o_c_e_d_u_r_e Ack(m, n);
      _v_a_l_u_e m, n;
      _i_n_t_e_g_e_r m, n;

      TAIL:
         _i_f m = 0 _t_h_e_n
            Ack := n + 1
         _e_l_s_e _i_f n = 0 _t_h_e_n
            Ack := Ack(m - 1, 1)
         _e_l_s_e
            _b_e_g_i_n
               n := Ack(m, n - 1);
               m := m - 1;
               _g_o_t_o TAIL;
            _e_n_d;
   c  := sin(0.0);
   c  := sin(c);

   writetext(30, _[Fully*recursive_[c_]_]);
   k:= 16;
   k1 := 1;
   _f_o_r i := 1 _s_t_e_p 1 _u_n_t_i_l 7 _d_o
         _b_e_g_i_n
         t1 := sin(0.0);
         j : = ackermann(3, i);
         t2 := sin(t1) - c;
         _i_f j ± k - 3 _t_h_e_n
            _b_e_g_i_n
            output(30, i);
            output(30, j)
            _e_n_d;
         write(30, format(_[nds_]),  i);
         write(30, format(_[ndddd_]), 3 × t2 / (512 × k1 - 15 × k + 9 × i + 37) );
         writetext(30, _[*instructions*per*call_[c_]_]);
         k1 := 4 × k1;
         k := 2 × k
         _e_n_d;

   writetext(30, _[With*tail*calls*looping_[c_]_]);
   k:= 16;
   k1 := 1;
   _f_o_r i := 1 _s_t_e_p 1 _u_n_t_i_l 7 _d_o
         _b_e_g_i_n
         t1 := sin(0.0);
         j : = Ack(3, i);
         t2 := sin(t1) - c;
         _i_f j ± k - 3 _t_h_e_n
            _b_e_g_i_n
            output(30, i);
            output(30, j)
            _e_n_d;
         write(30, format(_[nds_]),  i);
         write(30, format(_[ndddd_]), 3 × t2 / (512 × k1 - 15 × k + 9 × i + 37) );
         writetext(30, _[*instructions*per*call_[c_]_]);
         k1 := 4 × k1;
         k := 2 × k
         _e_n_d
_e_n_d
|



