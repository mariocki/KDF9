P
WFMAKEPLTUPU
MAKE A PROGRAM LIBRARY TAPE|
ST 8000; TL 99999;
YB256; YI256; YP256; YL0; V1016; W0;
RESTART; J999; J999;
PROGRAM;

   V0   = 0;
   V1   = 0;
   V2   = 0;
   V3   = 0; (mt_unit);
   V4   = 0; (tr_unit);
   V5   = P-01-2345;
   V6   = P+PROGRAM;
   V7   = P/LIBRARY;
   V8   = 0;
   V9   = 0; (block_count);
   V10  = B30;
   V11  = PINVALID-;
   V12  = 0;
   V13  = 0;
   V14  = 0;
   V15  = B7777777777777702;
   V16  = Q 0/AV10/AV15;
   V17  = PA-BLOCK ;
   V18  = PB-BLOCK ;
   V19  = B0277777777777777;
   V20  = PNO$LAST;
   V21  = PPOST$BIN;
   V22  = PNO$LAST;
   V23  = PBLOCK$ON;
   V24  = PTHE$TAPE;


   (claim TR);
   SET 2; SET 5; OUT; =V4;


   (check for input);
   JS350; (read  the A block);
   J9NTR; (if we have data to add to the PLT);

   (no data: initialize the PLT);

   (claim 'ZERO' MT scratch tape);
   V0; SET 4; OUT; =V3;
   (write new label);
   V3; =C15; SET AV5; =I15; SET AV7; =M15;
   MWQ15;
   (write a last "last block", with 0 in D0-D16);
   SET -3; =V9;
   JS200;
   J999; (all done for now);

9;
   (we have at least one program, so add to the tape);

   (claim the PLT tape);
   V7; V6;  SET 10; OUT; =V3;
   (check the TSN);
   V5; NEV;
   J999NEZ;

   (skip the label and the following sentinel);
   V3; =C15; SET 1; =M15; MFSKQ15;
   V3; =C15; SET 1; =M15; MFSKQ15;

90;
   (skip 4 blocks or until a 'last' block);
   V3; =C15; SET 4; =M15; MFSKQ15;

   (ensure we are actually at a 'last' block);
   MLBQ15;
   J91TR;

   (error message and quit);
   V22; =V12; V23; =V13; V24; =V14; V19; =V15;
   V16; SET 8; OUT;
   J999;


91;
   (skip back 1 block over the previous 'last' block);
   V3; =C15; SET 1; =M15; MBSKQ15;

   (read the 'last' block and check its I and M parts are 0);
   V3; =C15; SET AV12; DUP; =I15; =M15; MFRQ15;
   V12; SHL+16; SHL-16;
   J90NEZ;

   (skip back 1 block over the last 'last' block);
   V3; =C15; SET 1; =M15; MBSKQ15;

   (wipe it out);
   V3; =C15; SET 128; =M15; MWIPEQ15;

   (skip back 1 block over the previous 'last' block);
   V3; =C15; SET 1; =M15; MBSKQ15;

   (skip forward 1 block into the erased area);
   V3; =C15; SET 1; =M15; MFSKQ15;

   (write a new last "last block", with 0 in D0-D16);
   SET -3; =V9;
   JS200;

8;
   (we are now positioned to add new data to the tape);

   JS301; (check the A block);
   JS300; (write the A block);

   JS650; (read  the B block);
   JS601; (check and validate the B block);
   JS300; (write the B block);

1;
   JS450; (read  a binary information block);

   JS400; (write a binary information block);
   JS200; (write a "last block", with block_count in D0-D16);
   J2TR;
   J1;

2;
   JS500;   (write the final last block);

   J999;

100; (write a sumchecked block to MT);
   SET AYP0; =RM1; SET 253; =C1;
   YP254; STR;
*101;
   M0M1Q; STR; +D;
   *J101C1NZS;
   SHL+16; SHL-16; V9; (block_count); SHL+32; OR; =YP254;
   =YP255;
   SET AYP0; = I1; SET AYP255; =M1; V3; = C1;
   MWQ1;
   V9; (block_count); NOT; NEG; =V9; (block_count);
   EXIT 1;


200; (write a "last block", with block_count + 3 in D0-D16);
   ZERO; =Q2; V9; (block_count); SET 3; +; =C2; Q2; =YL0;
   SET AYL0; DUP; = I2; =M2; V3; =C2;
   MLWQ2;
   V9; (block_count); NOT; NEG; =V9;
   EXIT 1;


300; (write A block or a B block);
   SET AYI0;
   JS900;
   JS100;
   EXIT 1;

301;
   (check the A block);
   YI0; DUP; SHC+12; SET B7777; AND; SET B0702; (ñ®); NEV;
   J399NEZ; ERASE;
   YI0; SHC+24; SET B77; AND; SET B02; (®); NEV;
   J399NEZ;
   (force in the M medium letter);
   YI0; SHC+18; SET B77; NOT; AND; SET B55; OR; SHC-18; =YI0;
   EXIT 1;
399;
   (diagnose the failed A block);
   YI0; =V13; YI1; =V14; V17; =V12;
   V16; SET 8; OUT;
   J999;

350; (read the A block from TR);
   V4; =C4; SET AYI0; DUP; =I4; SET 7; +; =M4;
   PIBQ4;
   PARQ4;
   EXIT 1;


601;
   (check the B block);
   YI2; DUP; SHC+12; SET B7777; AND; SET B0702; (ñ®); NEV;
   J699NEZ; ERASE;
   YI2; SHC+24; SET B77; AND; SET B02; (®); NEV;
   J699NEZ;
   (force in the M medium letter);
   YI2; SHC+18; SET B77; NOT; AND; SET B55; OR; SHC-18; =YI2;
   EXIT 1;
699;
   (diagnose the failed B block);
   YI2; =V13; YI3; =V14; V18; =V12;
   V16; SET 8; OUT;
   J999;

650; (read the B block from TR);
   V4; =C4; SET AYI0; DUP; =I4; SET 7; +; =M4;
   PIAQ4;
   EXIT 1;


400; (write a binary information block);
   SET AYB0;
   JS900;
   JS100;
   EXIT 1;

450; (read a binary information block from TR);
   V4; =C4; SET AYB0; DUP; =I4; SET 253; +; =M4;
   PIAQ4;
   PARQ4;
   EXIT 1;


500; (write the last "last block", with 0 in D0-D16);
   V9; (block_count); =Q5; Q5; =YL0;
   SET AYL0; DUP; = I5; =M5; V3; = C5;
   MLWQ5;
   EXIT 1;


900; (copy a block to YP0-YP253; address of data in N1);
   =RM9; SET 253; =C9;
   SET AYP0; =RM10;
*901;
   M0M9Q; =M0M10Q;
   *J901C9NZS;
   V9; =YP254; (put block count in second-last word);
   EXIT 1;



999;
   V4; SET 6; OUT;
   V3; SET 6; OUT;
   ZERO; OUT;

FINISH;
|
