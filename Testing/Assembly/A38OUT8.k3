ST30000; TL2000;
V24; W0;
YS26000;
RESTART; J999; J999;
PROGRAM;                   (main program);
   V1 = B1212121212121212; (radix 10 for FRB);
   V2 = B2020202020202020; (high bits for decimal digits);
   V3 = B0741062107230637; ("A[3,"  in Flexowriter code);
   V4 = B0730062200250007; ("8] = " in Flexowriter code);
   V5 = B7777777777777777;
   V6 = B7777777777777775;
   V7 = Q4095/B10/B10;
   V8 = B7777777700000000;
   V9 = Q0/AV2/AV6;

      ZERO; NOT; =M1;      (Q1 := 0/0/-1);
      SETAYS0; =M2; I2=2;  (Q2 := 0/2/AYS0: M2 is the stack pointer);
      SET 3; =RC7;         (Q7 := 3/1/0: C7 = m);
      SET 8; =RC8;         (Q8 := 8/1/0: C8 = n);
   JSP1;                   (call Ackermann function);
      V1; REV; FRB;        (convert result to base 10);
      V2; OR;              (convert decimal digits to characters);
      V5; REV;
      SHLD+24; V8; AND; SETB02; OR; =V5; ERASE; (eliminate leading zeros);
      SETAV5; =RM9;
      SETAV3; =I9;

      SET1; SET5; OUT; =C9;
      POAQ9;          (write result to TP directly);

      SET B10; =V2;
      V9; SET 8; OUT;     (write result to TP0 with OUT 8);

      SET B11; =V2;
      V9; SET 8; OUT;     (write result to TP1 with OUT 8);

      SET B77; NOT; V5; AND; SET B75; OR; =V5; (replace LS by EM);
      ZERO; =V2;
      ZERO; =C6; SET AV2; =I6; SET AV6; =M6;
      Q6; SET 8; OUT;     (write result to Flexowriter with OUT 8);

999;  ZERO; OUT;           (terminate run);

P1; (To compute A[m, n]);

   99;
      J1C7NZ;           (to 1 if m ± 0);
         I8; =+C8;      (n := n + 1);
         C8;            (result to NEST);
      EXIT 1;           (return);
   *1;
      J2C8NZ;           (to 2 if n ± 0);
         I8; =C8;       (n := 1);
         DC7;           (m := m - 1);
      J99;              (tail recursion for A[m-1, 1]);
   *2;
         LINK; =M0M2;   (push return address);
         C7; =M0M2QN;   (push m);
         DC8;           (n := n - 1);
      JSP1;             (full recursion for A[m, n-1]);
         =C8;           (n := A[m, n-1]);
         M1M2; =C7;     (m := top of stack);
         DC7;           (m := m - 1);
         M-I2;          (pop stack);
         M0M2; =LINK;   (return address := top of stack);
      J99;              (tail recursion for A[m-1, A[m, n-1]]);


P2V1;
   V0  = PABCDEFGH;
   V1  = -1;

FINISH;
|
