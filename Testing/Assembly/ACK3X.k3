V0; W0;
YS26000;
RESTART; J999; J999;
PROGRAM;                   (main program);

      ZERO; NOT; =M1;      (Q1 :=  0/0/-1);
      SETAYS0; =M2; I2=+2; (Q2 :=  0/2/AYS0: M2 is the stack pointer);
      SET 3; =RC7;         (Q7 :=  3/1/0: C7 = m);
      SET 10; =RC8;        (Q8 := 10/1/0: C8 = n);
      SET 1;
   JSP1;                   (call Ackermann function);

999;  C8; ZERO; OUT;           (terminate run);

P1; (To compute A[m, n]);

   99;
      J1C7NZ;           (to 1 if m ± 0);
         DUP; =+C8;      (n := n + 1);
      EXIT 1;           (return, result in C8);
   *1;
      J2C8NZ;           (to 2 if n ± 0);
         DUP; =C8;      (n := 1);
         DC7;           (m := m - 1);
      J99;              (tail recursion for A[m-1, 1]);
   *2;
         LINK; =M0M2;   (push return address);
         C7; =M0M2QN;   (push m);
         DC8;           (n := n - 1);
      JSP1;             (full recursion for A[m, n-1]);
         M1M2; =C7;     (m := top of stack);
         DC7;           (m := m - 1);
         M-I2;          (pop stack);
         M0M2; =LINK;   (return address := top of stack);
      J99;              (tail recursion for A[m-1, A[m, n-1]]);

FINISH;
|
