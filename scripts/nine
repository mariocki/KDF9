#!/bin/bash
#------------------------------------------------------------------------
#    This file is part of ee9.
#
#    ee9 is free software: you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation, either version 3 of the License, or
#    (at your option) any later version.
#
#    ee9 is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#
#    You should have received a copy of the GNU General Public License
#    along with ee9.  If not, see <https://www.gnu.org/licenses/>.
#------------------------------------------------------------------------
#------------------------------------------------------------------------
# nine : Executes a KDF9 binary with input on TR0 or datafile.
#------------------------------------------------------------------------

if [ -z $KDF9RUNTIME ]; then
    KDF9RUNTIME="$HOME/.kdf9"
fi

if [ $# -eq 0 ]; then
    set -- "-h"
fi

DATA=${KDF9RUNTIME}/Data
TEMPORARY=/tmp

while [[ "$#" -gt 0 ]]; do
    case ${1# } in
    -h | --help)
        echo "NINE - Executes a KDF9 binary with data on TR0 or DATAFILE."
        echo
        echo "Usage: nine [OPTION]... BINARYNAME [DATAFILE]"
        echo
        echo "  -d, --diag=[f|p|t]          define the diagnostic mode"
        echo "  -s, --state=[b|p|t]         define the run state"
        echo "  -m, --misc=[a|d|e|f|g|h|i|m|n|o|p|q|r|s|t|w|x|z|0|1|2|3|4|5|6|7|8|9]"
        echo "                              define the miscellaneous options"
        echo "  -TP=TPMODE                  define the TP mode"
        echo "  -TR=TRMODE                  define the TR mode"
        echo
        echo "Note: BINARYNAME must exist in ${KDF9RUNTIME}/Binary/"
        echo "      DATAFILE must exist in ${DATA}"
        echo
        exit 0
        ;;
    -s=* | --state=*)
        state=-s${1#*=}
        ;;
    -d=* | --diag=*)
        mode=-d${1#*=}
        ;;
    -m=* | --misc=*)
        miscellany=-m${1#*=}
        ;;
    -TR=*)
        TRmode=-TR${1#*=}
        ;;
    -TP=*)
        TPmode=-TP${1#*=}
        ;;
    *)
        if [ -z ${prog} ]; then
            prog="$1"
        else
            datafile="$1"
        fi
        ;;
    esac
    shift
done

>${KDF9RUNTIME}/LP0
>${KDF9RUNTIME}/LP1

if [ x"${prog}"x = xx ]; then
    echo "You have not named a binary program to be run."
    echo
    exit 1
fi

program=$(basename "${prog}")
program=Binary/"$program"
if [ ! -r "${KDF9RUNTIME}/$program" ]; then
    echo "The object code file "${KDF9RUNTIME}/$program" is absent or unreadable."
    echo
    exit 2
fi

if [ x"${datafile}"x = xx ]; then
    >${KDF9RUNTIME}/TR1
else
    datatxt=${DATA}/$(basename "${datafile}" ".txt").txt
    if [ -r "$datatxt" ]; then
        cat "$datatxt" >${KDF9RUNTIME}/TR1
    else
        echo "The file "$datatxt" is absent or unreadable."
        exit 3
    fi
fi

if [ ! -r ${USERCODE}/$1-listing.txt ]; then
    echo
    echo ${ID} ${USERCODE}/$1-listing.txt is absent or unreadable.
    echo ${ID} Disassembly will not show operands as Usercode symbols.
    echo
else
    extract_symbols <${USERCODE}/$1-listing.txt >${KDF9RUNTIME}/settings_symbols.txt
    if [ -r ${KDF9RUNTIME}/settings_3.txt ]; then
        cp ${KDF9RUNTIME}/settings_3.txt ${KDF9RUNTIME}/settings_1.txt
    fi
    cat ${KDF9RUNTIME}/settings_symbols.txt >>${KDF9RUNTIME}/settings_1.txt
fi

if [ "$mode" = -df ]; then
    time ee9 "$state" "$mode" "$TRmode" "$TPmode" "$miscellany" +"$program"
else
    ee9 "$state" "$mode" "$TRmode" "$TPmode" "$miscellany" +"$program"
fi

case $miscellany in
*z*) ;;

*)
    printoutput
    ;;
esac
