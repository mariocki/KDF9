#!/bin/bash
#------------------------------------------------------------------------
#    This file is part of ee9.
#
#    ee9 is free software: you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation, either version 3 of the License, or
#    (at your option) any later version.
#
#    ee9 is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#
#    You should have received a copy of the GNU General Public License
#    along with ee9.  If not, see <https://www.gnu.org/licenses/>.
#------------------------------------------------------------------------
#------------------------------------------------------------------------
# tsdnine : Executes a KDF9 binary in the director.
#------------------------------------------------------------------------

if [ -z $KDF9RUNTIME ]
then
    KDF9RUNTIME="$HOME/.kdf9"
fi

if [ $# -eq 0 ]
then
    set -- "-h";
fi

DATA=${KDF9RUNTIME}/Data

while [[ "$#" -gt 0 ]]; do
    case ${1# } in
        -h|--help) 
            echo "TSDNINE - Executes a KDF9 binary in director with data from DATAFILE.";
            echo;
            echo "Usage: crnine [OPTION]... BINARYNAME [DATAFILE]"
            echo;
            echo "  -d, --diag [f|p|t]          define the diagnostic mode";
            echo "  -m, --misc [a|d|e|f|g|h|i|m|n|o|p|q|r|s|t|w|x|z|0|1|2|3|4|5|6|7|8|9]"
            echo "                              define the miscellaneous options";
            echo "  -TP TPMODE                  define the TP mode";
            echo "  -TR TRMODE                  define the TR mode";
            echo;
            echo "Note: BINARYNAME must exist in ${KDF9RUNTIME}/Binary/"
            echo "      DATAFILE must exist in ${DATA}"
            echo;
            exit 0;;
        -d=*|--diag=*)
            mode=-d${1#*=};
            ;;
        -m=*|--misc=*)
            miscellany=-m${1#*=};
            ;;
        -TR=*)
            TRmode=-TR${1#*=};
            ;;
        -TP=*)
            TPmode=-TP${1#*=};
            ;;
        *)
            if [ -z ${prog} ];
            then
                prog="$1";
            else
                datafile="$1";
            fi
            ;;
    esac
    shift;
done

trap "rm -f /tmp/$1.pblk; exit 2" 1 2 3

if [ x${prog}x = xx ]
then
   echo; echo "No program name was given."; echo
   exit 1
fi

# Set up a set of labelled tapes, including at least one ZERO (scratch) tape.
cat > ${DATA}/tape_labels_for_TSD.txt <<++++
-00-1478        |
-66-1909EXAMTIME|
-00-0552EFPBEAAG|
        MS-DUMP.|
-00-2339+KOUTPUT/0023004|
0-00-929PRINTEND|
0-00-777AMPEXTM4|
|
++++

rlt tape_labels_for_TSD.txt - z

# Create a call tape from the binary program.
a2b -p2c P < ${KDF9RUNTIME}/Binary/${prog}  > /tmp/${prog}.pblk

# Combine the call tape and the binary in a single paper tape file.
cat ${KDF9RUNTIME}/Binary/$1 >> /tmp/${prog}.pblk
mv /tmp/${prog}.pblk ${KDF9RUNTIME}/TR1

#ucc PLT
#nine PLT $1 - z kk

if [ x"${datafile}"x = xx ]
then
   : no data file
else
   # Add the data file to the end of the paper tape.
   a2b -L2p < ${DATA}/${datafile}.txt >> ${KDF9RUNTIME}/TR1
fi

# Run Director.
tsd "${mode/-d/-d=}" "${miscellany/-m/-m=}"
